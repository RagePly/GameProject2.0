
structure

	settings.h	:iostream
	color.h		:settings.h
	geometry.h	:color.h
	worldObject.h :geometry.h
	raycaster.h	:worldObject.h
	rasterizer.h :raycaster.h
	player.h : rasterizer.h
	game.h		:player.h, vector, SDL.h




Pixel Format

	Especially the RGBA format
	So for a given pixel, you have 4 bytes (8 bits) of information
	char R,G,B,A (remember, one char is one byte)

	pixel data is in series: R,G,B,A, R,G,B,A and so on

	therefore, if you loop through pixels, you have to multiply y * 4 * width and x * 4 to cycle through pixels. 

	and then 
			pixels[index + 0] = byte R red
			pixels[index + 1] = byte G green
			pixels[index + 2] = byte B blue
			pixels[index + 3] = byte A alpha

	alternative 


	Rasterizer NOTES


	TODO: 
		- Make the camera move
		- Have a draw function for the rasterizer that updates every frame
			- Only active when the raycaster isnt printing
		- The rasterizer only needs a pointer to the gameWorld
		- Create the razsterizer
			- How does it work:
				- 



Maths about shadows are on page 171




MESHES

Vertexes are points which all have a unique position



current point to screen coordinate needs to be replaced by a:
	tfWorldToScreen which returns a float3 on the screen
	then also a screenftoint for converting the point already on the screen to a int
	then the draw thingy

Triangles store vertexes in a order, rotated so that the face is in the direction of the normal (cross product)

Steps:
	1: Add camera controls, remove duplicate code for checking if a point can be drawn
	2: Switch the function that generates a int2 point on the screen surface to one that give a float2 point
	3: define vertex and t




	TODO: Fix so that the camera movement works, sofar the arrows are set to specific axis.







	Rotational matrices, checked to actually work

	
		|	1	0	0		|
	Rx	|	0	cos	-sin	|
		|	0	sin	cos		|

		|	cos		0	sin	|
	Ry	|	0		1	0	|
		|	-sin	0	cos	|

		|	cos	-sin	0	|
	Rz	|	sin	cos		0	|
		|	0	0		1	|



	RyRx	|	cosy		0		siny		|
			|	sinx*siny	cosx	-sinx*cosy	|
			|	-cosx*siny	sinx	cosx*cosy	|

			x stands for the rotation round the x-axis, y stands for the rotation round' the y-axis

	RzRyRx |
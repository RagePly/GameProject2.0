
structure

	settings.h	:iostream
	color.h		:settings.h
	geometry.h	:color.h
	raycaster.h	:geometry.h
	rasterizer.h :raycaster.h
	game.h		:rasterizer.h, vector, SDL.h




Pixel Format

	Especially the RGBA format
	So for a given pixel, you have 4 bytes (8 bits) of information
	char R,G,B,A (remember, one char is one byte)

	pixel data is in series: R,G,B,A, R,G,B,A and so on

	therefore, if you loop through pixels, you have to multiply y * 4 * width and x * 4 to cycle through pixels. 

	and then 
			pixels[index + 0] = byte R red
			pixels[index + 1] = byte G green
			pixels[index + 2] = byte B blue
			pixels[index + 3] = byte A alpha

	alternative 


	Rasterizer NOTES


	TODO: 
		- Make the camera move
		- Have a draw function for the rasterizer that updates every frame
			- Only active when the raycaster isnt printing
		- The rasterizer only needs a pointer to the gameWorld
		- Create the razsterizer
			- How does it work:
				- 



Maths about shadows are on page 171
